@model RentACarShared.VehicleViewModel

@{
    ViewData["Title"] = "Details";
}

<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <style>
        #map {
            width: 100%;
            height: 65vh;
            margin-bottom: 10px;
        }
    </style>
</head>

<body>
   <h1>Details</h1>

    <div>
        <h4>VehicleViewModel</h4>
        <hr />
        <dl class="row">
            <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Title)
            </dt>
            <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Title)
            </dd>
            @if (Model.PictureViewModels.Count > 0)
            {
                foreach (var image in Model.PictureViewModels)
                {
                    string base64 = Convert.ToBase64String(image.ImageData);
                    string imgsrc = "data:image/jpeg;base64," + base64;
                    <img src="@imgsrc" alt="Image cap">
                }
            }
            <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Model)
            </dt>
            <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Model)
            </dd>
            <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Brand)
            </dt>
            <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Brand)
            </dd>
            <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Type)
            </dt>
            <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Type)
            </dd>
            <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Description)
            </dt>
            <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Description)
            </dd>
            <dt class = "col-sm-2" id="amount">
                @Html.DisplayNameFor(model => model.Price)
            </dt>
            <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Price) €/Day
            </dd>
            <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Location)
            </dt>
            <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Location)
            </dd>
        </dl>
    </div>
    <div id="map"></div>
    <div>
        @Html.ActionLink("Reserve", "Booking", "Vehicle", new { vehicleId = Model.Id})
    </div>
    <div id="paypal-button-container" style="width: 20%"></div>
    <div>
        @Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ }) |
        <a asp-action="Index">Back to List</a>
    </div>
</body>



<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
<script src="https://www.paypal.com/sdk/js?client-id=AW8Bc3UIpLv5DPZ14gook6yj-lKURZRsWUrNNvKVtxYcbTn3WgMt--PXzgnIDxLtiETZyEq_7-VLV80c&currency=USD&disable-funding=credit,card"></script>

<script>
    var map = L.map('map').setView([@Model.Latitude, @Model.Longitude], 13);

    var osm = L.tileLayer('https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png', {
	    attribution: '&copy; <a href="https://stadiamaps.com/">Stadia Maps</a>, &copy; <a href="https://openmaptiles.org/">OpenMapTiles</a> &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors'
    }).addTo(map);

    L.marker([@Model.Latitude, @Model.Longitude]).addTo(map);
</script>

<script>
      var amount = document.getElementById("") 

      paypal.Buttons({
        style: {
            color: 'blue'
        },
        // Order is created on the server and the order id is returned
        createOrder(data, actions) {
          return actions.order.create({
            purchase_units: [{
                amount: {
                    value: @Model.Price.ToString(),
                },
            }],
          })
        },
        // Finalize the transaction on the server after payer approval
        onApprove(data) {
          return actions.order.capture().then(function(details){
            alert("Transaction completed by " + details.payer.name.given_name)
          })
        },
      }).render('#paypal-button-container');
</script>